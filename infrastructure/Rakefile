#!/usr/bin/env rake
require 'nokogiri'
require 'json'
require 'rubygems'
require 'chef'
require 'rbconfig'

# Load common, useful tasks from Chef.
TOPDIR = File.expand_path(File.join(File.dirname(__FILE__), ".."))
load 'chef/tasks/chef_repo.rake'

STDOUT.sync = true

###########
#  Tasks  #
###########

namespace :integration_test do
	desc "Launch new Windows EC2 instances to run integration tests"
	task :windows do
		stack_name = "Windows2008R2SpotInstance-test-#{Time.new.strftime("%Y%m%dT%H%M%S")}"
		template = "./templates/Windows2008R2SpotInstance.template"

		launch_stack(stack_name, template, { :disable_rollback => true })
	end

	desc "Launch new Ubuntu EC2 instances to run integration tests"
	task :ubuntu do
		stack_name = "Ubuntu1204SpotInstance-test-#{Time.new.strftime("%Y%m%dT%H%M%S")}"
		template = "templates/Ubuntu1204SpotInstance.template"

		launch_stack(stack_name, template, { :disable_rollback => true })
	end
end

desc "Initialise / update chef cookbooks as defined in ./Cheffile"
task :update_chef_repo do
	puts "Initializing chef repo using ./Cheffile"
	puts `librarian-chef update` 
	puts `librarian-chef show` 
end

task :default => 'integration_test:ubuntu'

###########
# Helpers #
###########

def launch_stack(stack_name, template, options = {})
	options[:timeout] 					||= 1800
	options[:chef_environment] 			||= "ec2-clock-accuracy-research_test"
	options[:key_name] 					||= "labs-commander"
	options[:notification_topic] 		||= "arn:aws:sns:{REGION}:{ACCOUNT}:as-labs-cityindex-com"
	options[:chef_config_bucket_name] 	||= "cityindex.labs.chef_bootstrap"
	options[:region_filter] 			||= "eu-west"
	options[:disable_rollback] 			||= "false"

	puts "[WARNING] This takes about 30 min to run, and will start & stop real EC2 instances"

	puts "Validating template: #{template}"
	puts exec_python "scripts/validate-template.py #{template}"

	disable_rollback = ""
	disable_rollback = "--disable_rollback" if options[:disable_rollback] 

	puts "Launching Ubuntu cloud stack in eu-west-1 region named #{stack_name}"
	cmd = <<EOS.gsub(/\s+/, " ").strip
	 	scripts/create-stacks.py #{stack_name} #{template} --enable_iam -r #{options[:region_filter]} #{disable_rollback} 
		-p KeyName=#{options[:key_name]} -p NotificationTopic=#{options[:notification_topic]} 
		-p ChefConfigBucketName=#{options[:chef_config_bucket_name]} -p ChefEnvironment=#{options[:chef_environment]} 
		-p WaitForInstanceTimeoutInSec=#{options[:timeout]} 
EOS
	puts exec_python cmd

	wait_for_stack(stack_name, options)

	puts "Deleting stack #{stack_name}"
	puts exec_python "scripts/delete-stacks.py #{stack_name} -r eu-west"
end

def exec_python(cmd) 
	is_windows = (RbConfig::CONFIG['host_os'] =~ /mswin|mingw|cygwin/)
	if is_windows then 
		cmd = "python #{cmd}" 
	else 
		cmd = "./#{cmd}"
	end
	out = `#{cmd}`
	fail(out) if $?.to_i != 0
	out
end

def wait_for_stack(stack_name, options = {})
	options[:chef_config_bucket_name] 	||= "cityindex.labs.chef_bootstrap"

	print "Waiting for stack to initialise .."
	stack_status = "CREATE_IN_PROGRESS"
	stack_status_reason = ""
	result = ""
	begin
		while stack_status == "CREATE_IN_PROGRESS"
			print "."; sleep 15; print "."; sleep 15; print "."; sleep 15; print "."; sleep 15 # 4 . over 60 sec

			result = exec_python "scripts/describe-stacks.py -r eu-west-1 -s #{stack_name} --xml"
			stacks =  Nokogiri::XML(result)
			stack_status = stacks.xpath('//StackStatus').text
		end

		puts "\n=========================================="
		puts "                 Logs"
		puts "=========================================="
		puts exec_python "scripts/read-buckets.py --prefix bootstrap-logs-eu-west-1/#{stack_name} #{options[:chef_config_bucket_name]}"
	rescue
		puts result
	ensure
		if (stack_status != "CREATE_COMPLETE") then
			fail("Stack creation failed: #{stack_status} - #{stack_status_reason}") 
		else
			puts stack_status
			puts "Stack created successfully"
		end
	end
end